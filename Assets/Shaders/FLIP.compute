#pragma kernel ResetStaggeredGridQuantities
#pragma kernel ResetGridQuantities
#pragma kernel Transfer

#define THREAD_NUM_X 16
#define SOLID 2
#define FLUID 1
#define EMPTY 0


struct FluidParticle {
	float2 pos;
	float2 vel;
};

RWStructuredBuffer<FluidParticle> _Particles;
RWStructuredBuffer<float>	_GridVel;
RWStructuredBuffer<float>	_GridVelSaved;
RWStructuredBuffer<int>	_GridMass;
RWStructuredBuffer<float>	_GridPressure;
RWStructuredBuffer<float>	_GridDivergence;
RWStructuredBuffer<int>		_GridFlag;


cbuffer cb {
	uint _N;
	float _DT;
	float _Flip;
	uint _Y;
};


float InterpolateX(int cellX, int cellY, float2 pos) {
	return (1 - abs(cellX - pos.x)) * (1 - abs(cellY + 0.5f - pos.y));	// cellYは-0.5されているので足している
}

float InterpolateY(int cellX, int cellY, float2 pos) {
	return (1 - abs(cellX + 0.5f - pos.x)) * (1 - abs(cellY - pos.y));
}

int CalcIndexX(int i, int j) {
	return (i + j * (_N + 1));
}

int CalcIndexY(int i, int j) {
	return _Y + i + j * _N;
}


// 2 * n * n+1
[numthreads(THREAD_NUM_X,1,1)]
void ResetStaggeredGridQuantities(uint3 DTid : SV_DispatchThreadID) {
	int id = DTid.x;

	_GridVel[id] = 0;
	_GridVelSaved[id] = 0;
	_GridMass[id] = 0;
}

int2 One2Two(int idx, int n) {
	return int2(idx % n, idx / n);
}

[numthreads(THREAD_NUM_X, 1, 1)]
void ResetGridQuantities(uint3 DTid : SV_DispatchThreadID) {
	int id = DTid.x;

	_GridPressure[id] = 0;
	_GridDivergence[id] = 0;


	int2 iid = One2Two(id, _N);
	int i = iid.x; int j = iid.y;

	_GridFlag[id] = (i == 0 || j == 0 || i == _N - 1 || j == _N - 1) ? SOLID : EMPTY;
}

// numParticles
[numthreads(THREAD_NUM_X, 1, 1)]
void Transfer(uint3 DTid : SV_DispatchThreadID) {
	int id = DTid.x;

	// Each particle
	// TODO 格子の大きさを可変に
	int i  = (int)_Particles[id].pos.x,
	    j  = (int)_Particles[id].pos.y,
	    fi = (int)(_Particles[id].pos.x - 0.5f), // 半分左にずらす
	    fj = (int)(_Particles[id].pos.y - 0.5f); // 半分下にずらす

	_GridFlag[i + j * _N] = FLUID;  // 粒子の存在する格子は流体フラグ

	InterlockedAdd(_GridMass[0], 1);
	// 他のスレッドと競合している
	// X - velocity
	//for (int jj = fj; jj < fj + 2; ++jj) {
	//    for (int ii = i; ii < i + 2; ++ii) {
	//		_GridVel[CalcIndexX(ii, jj)] += _Particles[id].vel.x * InterpolateX(ii, jj, _Particles[id].pos);
	//		InterlockedAdd(_GridMass[CalcIndexX(ii, jj)], 10);
	//		//_GridMass[CalcIndexX(ii, jj)] += 1;	//InterpolateX(ii, jj, _Particles[id].pos)
	//    }
	//}

	//// Y - velocity
	//for (int jj = j; jj < j + 2; jj++) {
	//    for (int ii = fi; ii < fi + 2; ii++) {
	//		_GridVel[CalcIndexY(ii, jj)] += _Particles[id].vel.y * InterpolateY(ii, jj, _Particles[id].pos);
	//		InterlockedAdd(_GridMass[CalcIndexY(ii, jj)], 1);
	//		//_GridMass[CalcIndexY(ii, jj)] += InterpolateY(ii, jj, _Particles[id].pos);
	//    }
	//}
}